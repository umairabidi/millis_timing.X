

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu Jul 27 22:38:05 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F616
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 09/02/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F616 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0007                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001B                     	;# 
    76     001C                     	;# 
    77     001E                     	;# 
    78     001F                     	;# 
    79     0081                     	;# 
    80     0085                     	;# 
    81     0087                     	;# 
    82     008C                     	;# 
    83     008E                     	;# 
    84     0090                     	;# 
    85     0091                     	;# 
    86     0092                     	;# 
    87     0095                     	;# 
    88     0095                     	;# 
    89     0096                     	;# 
    90     0096                     	;# 
    91     0099                     	;# 
    92     0099                     	;# 
    93     009A                     	;# 
    94     009E                     	;# 
    95     009F                     	;# 
    96     0007                     _PORTCbits	set	7
    97     000B                     _INTCONbits	set	11
    98     0001                     _TMR0	set	1
    99     0087                     _TRISCbits	set	135
   100     0091                     _ANSEL	set	145
   101     0081                     _OPTION_REGbits	set	129
   102                           
   103                           	psect	cinit
   104     000B                     start_initialization:	
   105                           ; #config settings
   106                           
   107     000B                     __initialization:
   108                           
   109                           ; Clear objects allocated to COMMON
   110     000B  01F6               	clrf	__pbssCOMMON& (0+127)
   111     000C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   112     000D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   113     000E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   114     000F                     end_of_initialization:	
   115                           ;End of C runtime variable initialization code
   116                           
   117     000F                     __end_of__initialization:
   118     000F  0183               	clrf	3
   119     0010  2863               	ljmp	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMMON
   122     0076                     __pbssCOMMON:
   123     0076                     _millisCount:
   124     0076                     	ds	4
   125                           
   126                           	psect	cstackCOMMON
   127     0070                     __pcstackCOMMON:
   128     0070                     ?_millisInit:
   129     0070                     ?_isr:	
   130                           ; 1 bytes @ 0x0
   131                           
   132     0070                     ??_isr:	
   133                           ; 1 bytes @ 0x0
   134                           
   135     0070                     ?_main:	
   136                           ; 1 bytes @ 0x0
   137                           
   138                           
   139                           ; 1 bytes @ 0x0
   140     0070                     	ds	2
   141     0072                     ??_millisInit:
   142     0072                     ?_millis:	
   143                           ; 1 bytes @ 0x2
   144                           
   145                           
   146                           ; 4 bytes @ 0x2
   147     0072                     	ds	4
   148     0076                     ??_millis:
   149     0076                     ??_main:	
   150                           ; 1 bytes @ 0x6
   151                           
   152                           
   153                           	psect	cstackBANK0
   154     0020                     __pcstackBANK0:	
   155                           ; 1 bytes @ 0x6
   156                           
   157     0020                     millis@result:
   158                           
   159                           ; 4 bytes @ 0x0
   160     0020                     	ds	4
   161     0024                     ?_delay_ms:
   162     0024                     delay_ms@ms:	
   163                           ; 1 bytes @ 0x4
   164                           
   165                           
   166                           ; 4 bytes @ 0x4
   167     0024                     	ds	4
   168     0028                     ??_delay_ms:
   169                           
   170                           ; 1 bytes @ 0x8
   171     0028                     	ds	4
   172     002C                     delay_ms@startTime:
   173                           
   174                           ; 4 bytes @ 0xC
   175     002C                     	ds	4
   176                           
   177                           	psect	maintext
   178     0063                     __pmaintext:	
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 49 in file "millis.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;		None
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, status,2, status,0, pclath, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : B00/0
   195 ;;		On exit  : 100/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMMON   BANK0   BANK1
   198 ;;      Params:         0       0       0
   199 ;;      Locals:         0       0       0
   200 ;;      Temps:          0       0       0
   201 ;;      Totals:         0       0       0
   202 ;;Total ram usage:        0 bytes
   203 ;; Hardware stack levels required when called: 3
   204 ;; This function calls:
   205 ;;		_delay_ms
   206 ;;		_millisInit
   207 ;; This function is called by:
   208 ;;		Startup code after reset
   209 ;; This function uses a non-reentrant model
   210 ;;
   211                           
   212     0063                     _main:	
   213                           ;psect for function _main
   214                           
   215                           
   216                           ;millis.c: 50: ANSEL = 0;
   217                           
   218                           ;incstack = 0
   219                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   220     0063  1683               	bsf	3,5	;RP0=1, select bank1
   221     0064  0191               	clrf	17	;volatile
   222                           
   223                           ;millis.c: 51: TRISCbits.TRISC3 = 0;
   224     0065  1187               	bcf	7,3	;volatile
   225                           
   226                           ;millis.c: 52: millisInit();
   227     0066  208F               	fcall	_millisInit
   228     0067                     l571:
   229                           
   230                           ;millis.c: 55: PORTCbits.RC3 = 1;
   231     0067  1587               	bsf	7,3	;volatile
   232                           
   233                           ;millis.c: 56: delay_ms(100);
   234     0068  3000               	movlw	0
   235     0069  00A7               	movwf	delay_ms@ms+3
   236     006A  3000               	movlw	0
   237     006B  00A6               	movwf	delay_ms@ms+2
   238     006C  3000               	movlw	0
   239     006D  00A5               	movwf	delay_ms@ms+1
   240     006E  3064               	movlw	100
   241     006F  00A4               	movwf	delay_ms@ms
   242     0070  2011               	fcall	_delay_ms
   243                           
   244                           ;millis.c: 57: PORTCbits.RC3 = 0;
   245     0071  1187               	bcf	7,3	;volatile
   246                           
   247                           ;millis.c: 58: delay_ms(100);
   248     0072  3000               	movlw	0
   249     0073  00A7               	movwf	delay_ms@ms+3
   250     0074  3000               	movlw	0
   251     0075  00A6               	movwf	delay_ms@ms+2
   252     0076  3000               	movlw	0
   253     0077  00A5               	movwf	delay_ms@ms+1
   254     0078  3064               	movlw	100
   255     0079  00A4               	movwf	delay_ms@ms
   256     007A  2011               	fcall	_delay_ms
   257     007B  2867               	goto	l571
   258     007C                     __end_of_main:
   259                           
   260                           	psect	text1
   261     008F                     __ptext1:	
   262 ;; *************** function _millisInit *****************
   263 ;; Defined at:
   264 ;;		line 20 in file "millis.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, status,2, status,0
   273 ;; Tracked objects:
   274 ;;		On entry : B00/100
   275 ;;		On exit  : B00/0
   276 ;;		Unchanged: A00/0
   277 ;; Data sizes:     COMMON   BANK0   BANK1
   278 ;;      Params:         0       0       0
   279 ;;      Locals:         0       0       0
   280 ;;      Temps:          0       0       0
   281 ;;      Totals:         0       0       0
   282 ;;Total ram usage:        0 bytes
   283 ;; Hardware stack levels used: 1
   284 ;; Hardware stack levels required when called: 1
   285 ;; This function calls:
   286 ;;		Nothing
   287 ;; This function is called by:
   288 ;;		_main
   289 ;; This function uses a non-reentrant model
   290 ;;
   291                           
   292     008F                     _millisInit:	
   293                           ;psect for function _millisInit
   294                           
   295                           
   296                           ;millis.c: 21: OPTION_REGbits.T0CS = 0;
   297                           
   298                           ;incstack = 0
   299                           ; Regs used in _millisInit: [wreg+status,2+status,0]
   300     008F  1281               	bcf	1,5	;volatile
   301                           
   302                           ;millis.c: 22: OPTION_REGbits.PSA = 0;
   303     0090  1181               	bcf	1,3	;volatile
   304                           
   305                           ;millis.c: 23: OPTION_REGbits.PS = 0b010;
   306     0091  0801               	movf	1,w	;volatile
   307     0092  39F8               	andlw	-8
   308     0093  3802               	iorlw	2
   309     0094  0081               	movwf	1	;volatile
   310                           
   311                           ;millis.c: 24: TMR0 = 9;
   312     0095  3009               	movlw	9
   313     0096  1283               	bcf	3,5	;RP0=0, select bank0
   314     0097  0081               	movwf	1	;volatile
   315                           
   316                           ;millis.c: 25: INTCONbits.T0IE = 1;
   317     0098  168B               	bsf	11,5	;volatile
   318                           
   319                           ;millis.c: 26: INTCONbits.GIE = 1;
   320     0099  178B               	bsf	11,7	;volatile
   321     009A  0008               	return
   322     009B                     __end_of_millisInit:
   323                           
   324                           	psect	text2
   325     0011                     __ptext2:	
   326 ;; *************** function _delay_ms *****************
   327 ;; Defined at:
   328 ;;		line 44 in file "millis.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;  ms              4    4[BANK0 ] unsigned long 
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  startTime       4   12[BANK0 ] unsigned long 
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, pclath, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 100/0
   339 ;;		On exit  : 100/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMMON   BANK0   BANK1
   342 ;;      Params:         0       4       0
   343 ;;      Locals:         0       4       0
   344 ;;      Temps:          0       4       0
   345 ;;      Totals:         0      12       0
   346 ;;Total ram usage:       12 bytes
   347 ;; Hardware stack levels used: 1
   348 ;; Hardware stack levels required when called: 2
   349 ;; This function calls:
   350 ;;		_millis
   351 ;; This function is called by:
   352 ;;		_main
   353 ;; This function uses a non-reentrant model
   354 ;;
   355                           
   356     0011                     _delay_ms:	
   357                           ;psect for function _delay_ms
   358                           
   359                           
   360                           ;millis.c: 45: uint32_t startTime = millis();
   361                           
   362                           ;incstack = 0
   363                           ; Regs used in _delay_ms: [wreg+pclath+cstack]
   364     0011  207C               	fcall	_millis
   365     0012  0875               	movf	?_millis+3,w
   366     0013  00AF               	movwf	delay_ms@startTime+3
   367     0014  0874               	movf	?_millis+2,w
   368     0015  00AE               	movwf	delay_ms@startTime+2
   369     0016  0873               	movf	?_millis+1,w
   370     0017  00AD               	movwf	delay_ms@startTime+1
   371     0018  0872               	movf	?_millis,w
   372     0019  00AC               	movwf	delay_ms@startTime
   373     001A                     l563:	
   374                           ;millis.c: 46: while ((millis() - startTime) < ms);
   375                           
   376     001A  207C               	fcall	_millis
   377     001B  0872               	movf	?_millis,w
   378     001C  00A8               	movwf	??_delay_ms
   379     001D  0873               	movf	?_millis+1,w
   380     001E  00A9               	movwf	??_delay_ms+1
   381     001F  0874               	movf	?_millis+2,w
   382     0020  00AA               	movwf	??_delay_ms+2
   383     0021  0875               	movf	?_millis+3,w
   384     0022  00AB               	movwf	??_delay_ms+3
   385     0023  082C               	movf	delay_ms@startTime,w
   386     0024  02A8               	subwf	??_delay_ms,f
   387     0025  082D               	movf	delay_ms@startTime+1,w
   388     0026  1C03               	skipc
   389     0027  0F2D               	incfsz	delay_ms@startTime+1,w
   390     0028  282A               	goto	u61
   391     0029  282B               	goto	u62
   392     002A                     u61:
   393     002A  02A9               	subwf	??_delay_ms+1,f
   394     002B                     u62:
   395     002B  082E               	movf	delay_ms@startTime+2,w
   396     002C  1C03               	skipc
   397     002D  0F2E               	incfsz	delay_ms@startTime+2,w
   398     002E  2830               	goto	u63
   399     002F  2831               	goto	u64
   400     0030                     u63:
   401     0030  02AA               	subwf	??_delay_ms+2,f
   402     0031                     u64:
   403     0031  082F               	movf	delay_ms@startTime+3,w
   404     0032  1C03               	skipc
   405     0033  0F2F               	incfsz	delay_ms@startTime+3,w
   406     0034  2836               	goto	u65
   407     0035  2837               	goto	u66
   408     0036                     u65:
   409     0036  02AB               	subwf	??_delay_ms+3,f
   410     0037                     u66:
   411     0037  0827               	movf	delay_ms@ms+3,w
   412     0038  022B               	subwf	??_delay_ms+3,w
   413     0039  1D03               	skipz
   414     003A  2845               	goto	u75
   415     003B  0826               	movf	delay_ms@ms+2,w
   416     003C  022A               	subwf	??_delay_ms+2,w
   417     003D  1D03               	skipz
   418     003E  2845               	goto	u75
   419     003F  0825               	movf	delay_ms@ms+1,w
   420     0040  0229               	subwf	??_delay_ms+1,w
   421     0041  1D03               	skipz
   422     0042  2845               	goto	u75
   423     0043  0824               	movf	delay_ms@ms,w
   424     0044  0228               	subwf	??_delay_ms,w
   425     0045                     u75:
   426     0045  1803               	btfsc	3,0
   427     0046  0008               	return
   428     0047  281A               	goto	l563
   429     0048                     __end_of_delay_ms:
   430                           
   431                           	psect	text3
   432     007C                     __ptext3:	
   433 ;; *************** function _millis *****************
   434 ;; Defined at:
   435 ;;		line 37 in file "millis.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;		None
   438 ;; Auto vars:     Size  Location     Type
   439 ;;  result          4    0[BANK0 ] unsigned long 
   440 ;; Return value:  Size  Location     Type
   441 ;;                  4    2[COMMON] unsigned long 
   442 ;; Registers used:
   443 ;;		wreg
   444 ;; Tracked objects:
   445 ;;		On entry : 100/0
   446 ;;		On exit  : 100/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMMON   BANK0   BANK1
   449 ;;      Params:         4       0       0
   450 ;;      Locals:         0       4       0
   451 ;;      Temps:          0       0       0
   452 ;;      Totals:         4       4       0
   453 ;;Total ram usage:        8 bytes
   454 ;; Hardware stack levels used: 1
   455 ;; Hardware stack levels required when called: 1
   456 ;; This function calls:
   457 ;;		Nothing
   458 ;; This function is called by:
   459 ;;		_delay_ms
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463     007C                     _millis:	
   464                           ;psect for function _millis
   465                           
   466                           
   467                           ;millis.c: 38: INTCONbits.GIE = 0;
   468                           
   469                           ;incstack = 0
   470                           ; Regs used in _millis: [wreg]
   471     007C  138B               	bcf	11,7	;volatile
   472                           
   473                           ;millis.c: 39: uint32_t result = millisCount;
   474     007D  0879               	movf	_millisCount+3,w	;volatile
   475     007E  00A3               	movwf	millis@result+3
   476     007F  0878               	movf	_millisCount+2,w	;volatile
   477     0080  00A2               	movwf	millis@result+2
   478     0081  0877               	movf	_millisCount+1,w	;volatile
   479     0082  00A1               	movwf	millis@result+1
   480     0083  0876               	movf	_millisCount,w	;volatile
   481     0084  00A0               	movwf	millis@result
   482                           
   483                           ;millis.c: 40: INTCONbits.GIE = 1;
   484     0085  178B               	bsf	11,7	;volatile
   485                           
   486                           ;millis.c: 41: return result;
   487     0086  0823               	movf	millis@result+3,w
   488     0087  00F5               	movwf	?_millis+3
   489     0088  0822               	movf	millis@result+2,w
   490     0089  00F4               	movwf	?_millis+2
   491     008A  0821               	movf	millis@result+1,w
   492     008B  00F3               	movwf	?_millis+1
   493     008C  0820               	movf	millis@result,w
   494     008D  00F2               	movwf	?_millis
   495     008E  0008               	return
   496     008F                     __end_of_millis:
   497                           
   498                           	psect	text4
   499     0048                     __ptext4:	
   500 ;; *************** function _isr *****************
   501 ;; Defined at:
   502 ;;		line 29 in file "millis.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1
   516 ;;      Params:         0       0       0
   517 ;;      Locals:         0       0       0
   518 ;;      Temps:          2       0       0
   519 ;;      Totals:         2       0       0
   520 ;;Total ram usage:        2 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; This function calls:
   523 ;;		Nothing
   524 ;; This function is called by:
   525 ;;		Interrupt level 1
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529     0048                     _isr:	
   530                           ;psect for function _isr
   531                           
   532                           
   533                           ;millis.c: 30: if (INTCONbits.T0IF) {
   534     0048  1D0B               	btfss	11,2	;volatile
   535     0049  285C               	goto	i1l23
   536                           
   537                           ;millis.c: 31: INTCONbits.T0IF = 0;
   538     004A  110B               	bcf	11,2	;volatile
   539                           
   540                           ;millis.c: 32: millisCount++;
   541     004B  3001               	movlw	1
   542     004C  07F6               	addwf	_millisCount,f	;volatile
   543     004D  3000               	movlw	0
   544     004E  1803               	skipnc
   545     004F  3001               	movlw	1
   546     0050  07F7               	addwf	_millisCount+1,f	;volatile
   547     0051  3000               	movlw	0
   548     0052  1803               	skipnc
   549     0053  3001               	movlw	1
   550     0054  07F8               	addwf	_millisCount+2,f	;volatile
   551     0055  3000               	movlw	0
   552     0056  1803               	skipnc
   553     0057  3001               	movlw	1
   554     0058  07F9               	addwf	_millisCount+3,f	;volatile
   555                           
   556                           ;millis.c: 33: TMR0 = 9;
   557     0059  3009               	movlw	9
   558     005A  1283               	bcf	3,5	;RP0=0, select bank0
   559     005B  0081               	movwf	1	;volatile
   560     005C                     i1l23:
   561     005C  0871               	movf	??_isr+1,w
   562     005D  008A               	movwf	10
   563     005E  0E70               	swapf	??_isr,w
   564     005F  0083               	movwf	3
   565     0060  0EFE               	swapf	126,f
   566     0061  0E7E               	swapf	126,w
   567     0062  0009               	retfie
   568     0063                     __end_of_isr:
   569     007E                     btemp	set	126	;btemp
   570     007E                     wtemp0	set	126
   571                           
   572                           	psect	intentry
   573     0004                     __pintentry:	
   574                           ;incstack = 0
   575                           ; Regs used in _isr: [wreg]
   576                           
   577     0004                     interrupt_function:
   578     007E                     saved_w	set	btemp
   579     0004  00FE               	movwf	btemp
   580     0005  0E03               	swapf	3,w
   581     0006  00F0               	movwf	??_isr
   582     0007  080A               	movf	10,w
   583     0008  00F1               	movwf	??_isr+1
   584     0009  2848               	ljmp	_isr
   585                           
   586                           	psect	config
   587                           
   588                           ;Config register CONFIG @ 0x2007
   589                           ;	Oscillator Selection bits
   590                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
   591                           ;	Watchdog Timer Enable bit
   592                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   593                           ;	Power-up Timer Enable bit
   594                           ;	PWRTE = OFF, PWRT disabled
   595                           ;	MCLR Pin Function Select bit
   596                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
   597                           ;	Code Protection bit
   598                           ;	CP = OFF, Program memory code protection is disabled
   599                           ;	Internal Oscillator Frequency Select bit
   600                           ;	IOSCFS = 8MHZ, 8 MHz
   601                           ;	Brown-out Reset Selection bits
   602                           ;	BOREN = OFF, BOR Disabled
   603     2007                     	org	8199
   604     2007  3CD4               	dw	15572

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     16      16
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _delay_ms->_millis

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_delay_ms
    _delay_ms->_millis

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     207
                           _delay_ms
                         _millisInit
 ---------------------------------------------------------------------------------
 (1) _millisInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                            12     8      4     207
                                              4 BANK0     12     8      4
                             _millis
 ---------------------------------------------------------------------------------
 (2) _millis                                               8     4      4      34
                                              2 COMMON     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
     _millis
   _millisInit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     10      10       4       20.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0      1A       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      1A       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu Jul 27 22:38:05 2023

                     u61 002A                       u62 002B                       u63 0030  
                     u64 0031                       u65 0036                       u66 0037  
                     u75 0045                      l563 001A                      l571 0067  
                    _isr 0048                     ?_isr 0070                     i1l23 005C  
                   _TMR0 0001                     _main 0063                     btemp 007E  
                   start 000A                    ??_isr 0070                    ?_main 0070  
                  _ANSEL 0091                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000B             __end_of_main 007C  
                 ??_main 0076         __end_of_delay_ms 0048                   _millis 007C  
                 saved_w 007E  __end_of__initialization 000F           __pcstackCOMMON 0070  
         _OPTION_REGbits 0081               __pmaintext 0063               __pintentry 0004  
                ?_millis 0072                ?_delay_ms 0024                  __ptext1 008F  
                __ptext2 0011                  __ptext3 007C                  __ptext4 0048  
             _millisInit 008F               ??_delay_ms 0028               delay_ms@ms 0024  
   end_of_initialization 000F                _PORTCbits 0007                _TRISCbits 0087  
           millis@result 0020           __end_of_millis 008F              ?_millisInit 0070  
    start_initialization 000B              __end_of_isr 0063                 ??_millis 0076  
            __pbssCOMMON 0076                ___latbits 0000            __pcstackBANK0 0020  
      interrupt_function 0004        delay_ms@startTime 002C             ??_millisInit 0072  
               _delay_ms 0011              _millisCount 0076       __end_of_millisInit 009B  
             _INTCONbits 000B                 intlevel1 0000  
